/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB)
{
    struct ListNode *ptr1,*ptr2,*ptr;
    int l1,l2,diff,loo,flag;
    l1=0;
    l2=0;
    loo=0;
    diff=0;
    ptr1=headA;
    ptr2=headB;
    flag=0;
    if(ptr1==NULL && ptr2==NULL)
    {
        return(NULL);
    }
    else if(ptr1!=NULL &&ptr2==NULL)
    {
        return(NULL);
    }
    else if(ptr1==NULL && ptr2!=NULL)
    {
        return(NULL);
    }
    else
    {
        while(ptr1!=NULL)
        {
            l1=l1+1;
            ptr1=ptr1->next;
        }
        while(ptr2!=NULL)
        {
            l2=l2+1;
            ptr2=ptr2->next;
        }
        ptr1=headA;
        ptr2=headB;
        if(l1>l2)
        {
            diff=l1-l2;
            while(loo!=diff)
            {
                ptr1=ptr1->next;
                loo++;
            }
            while(ptr1!=NULL)
            {
                if(ptr1==ptr2)
                {
                    flag=1;
                    ptr=ptr1;
                    break;
                }
                else
                {
                    ptr1=ptr1->next;
                    ptr2=ptr2->next;
                }
            }
            
        }
         else if(l1==l2)
        {
            while(ptr1!=NULL)
            {
                if(ptr1==ptr2)
                {
                    flag=1;
                    ptr=ptr1;
                    break;
                }
                else
                {
                    ptr1=ptr1->next;
                    ptr2=ptr2->next;
                }
            }
        }
        else
        {
            
            diff=l2-l1;
            while(loo!=diff)
            {
                ptr2=ptr2->next;
                loo++;
            }
             while(ptr1!=NULL)
            {
            if(ptr1==ptr2)
            {
                flag=1;
                ptr=ptr2;
                break;
            }
            else
            {
                    ptr1=ptr1->next;
                    ptr2=ptr2->next;
            }
        }
            
        }
    }
    if(flag==1)
    {
        return(ptr);
    }
    else
    {
        return(NULL);
    }

}


